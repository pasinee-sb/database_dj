"""Forms for playlist app."""
from wtforms import SelectField
from flask_wtf import FlaskForm
from wtforms_alchemy import ModelForm, model_form_factory
from models import Playlist, Song, PlaylistSong, db

BaseModelForm = model_form_factory(FlaskForm)


class ModelForm (BaseModelForm):
    @classmethod
    def get_session(self):
        return db.session


class PlaylistForm(ModelForm):
    """Form for adding playlists."""
    class Meta:
        model = Playlist


class SongForm(ModelForm):
    """Form for adding songs."""

    class Meta:
        model = Song


# DO NOT MODIFY THIS FORM - EVERYTHING YOU NEED IS HERE


class NewSongForPlaylistForm(ModelForm):
    """Form for adding a song to playlist."""

    class Meta:
        model = PlaylistSong

    song = SelectField('Song To Add', coerce=int)

    def __init__(self, playlist_id):
        """The __init__ method is a special method in Python classes that is called when an instance of the class is created.
        It takes playlist_id as a required argument, which is used to identify the playlist that 
        the user wants to add a song to"""
        super().__init__()
        """calls the __init__ method of the parent class (ModelForm) and passes all of the additional arguments and keyword arguments to it. 
        This is done to ensure that the form is properly initialized with all of the fields and validators defined in the Meta class."""
        self.song.choices = [
            (song.id, f"{song.title} - {song.artist}") for song in Song.query.all()]
        """This line sets the choices attribute of the song field to a list of tuples,
          where each tuple contains the song ID as the first element and the song title and artist as a formatted
            string as the second element. 
        The list of tuples is generated by using a list comprehension to iterate over all of the Song objects
          in the database and extract their ID, title, and artist."""
        self.playlist_id = playlist_id
        """This line stores the playlist_id argument as an instance attribute of the form. 
        This is done so that the validate method can access the ID of the playlist that the user wants to add a song to."""

    def validate(self, extra_validators=None):
        # call the parent class validate method
        rv = FlaskForm.validate(self)
        # run additional validators if they were passed in

        if not super().validate():
            """This line calls the validate method of the parent class (ModelForm) to perform the basic validation on the form data. 
            If the parent validation fails, the method immediately returns False and 
            does not proceed with the additional validation."""
            return False

        # run additional validators if they were passed in
        if extra_validators:
            for validator in extra_validators:
                validator(self)

        song = Song.query.get(self.song.data)
        """This line retrieves the Song object that corresponds to the song ID selected by the user in the song field.
          It uses the get method of the Song query object to retrieve the object with the given ID."""
        playlist_song = PlaylistSong.query.filter_by(
            playlist_id=self.playlist_id, song_id=song.id).first()
        """This line queries the PlaylistSong table to see if the selected song is already in the playlist identified by self.playlist_id. It filters the query to only include rows where the playlist_id and 
        song_id match the ID of the current playlist and the ID of the selected song, respectively. 
        It then retrieves the first result (if any) using the first method."""
        if playlist_song:
            """If a matching PlaylistSong object is found, it means that the selected song is already in the playlist. 
            The method adds an error message to the song field and returns False to indicate that the validation failed."""
            self.song.errors.append('This song is already in the playlist.')
            return False
        return True
        """If no matching PlaylistSong object is found, the method returns True to indicate that the validation passed. 
        This means that the form data is valid and can be processed further by the view function."""
